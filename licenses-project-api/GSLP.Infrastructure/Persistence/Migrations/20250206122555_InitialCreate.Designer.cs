// <auto-generated />
using System;
using GSLP.Infrastructure.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GSLP.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250206122555_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Application.Aplicacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FicheiroXAP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Versao")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Aplicacoes", "Aplicacao");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Application.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Areas", "Aplicacao");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Application.Funcionalidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModuloId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModuloId");

                    b.ToTable("Funcionalidades", "Aplicacao");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Application.Modulo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AplicacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AplicacaoId");

                    b.ToTable("Modulos", "Aplicacao");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Platform.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DadosExternos")
                        .HasColumnType("bit");

                    b.Property<string>("DadosUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NIF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sigla")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clientes", "Plataforma");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Platform.Licenca", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AplicacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<bool>("Bloqueada")
                        .HasColumnType("bit");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataBloqueio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LicencaAPIKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MotivoBloqueio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroUtilizadores")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AplicacaoId");

                    b.HasIndex("ClienteId");

                    b.ToTable("Licencas", "Plataforma");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Platform.LicencaAPIKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("APIKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LicencaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LicencaId")
                        .IsUnique();

                    b.ToTable("LicencasAPIKeys", "Plataforma");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Platform.LicencaFuncionalidade", b =>
                {
                    b.Property<Guid>("LicencaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FuncionalidadeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LicencaId", "FuncionalidadeId");

                    b.HasIndex("FuncionalidadeId");

                    b.ToTable("LicencasFuncionalidades", "Plataforma");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Platform.LicencaModulo", b =>
                {
                    b.Property<Guid>("LicencaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModuloId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LicencaId", "ModuloId");

                    b.HasIndex("ModuloId");

                    b.ToTable("LicencasModulos", "Plataforma");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Platform.LicencaUtilizador", b =>
                {
                    b.Property<Guid>("LicencaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UtilizadorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.HasKey("LicencaId", "UtilizadorId");

                    b.HasIndex("UtilizadorId");

                    b.ToTable("LicencasUtilizadores", "Plataforma");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Platform.Perfil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LicencaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LicencaId");

                    b.ToTable("Perfis", "Plataforma");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Platform.PerfilFuncionalidade", b =>
                {
                    b.Property<Guid>("PerfilId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FuncionalidadeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AuthAdd")
                        .HasColumnType("bit");

                    b.Property<bool>("AuthChg")
                        .HasColumnType("bit");

                    b.Property<bool>("AuthDel")
                        .HasColumnType("bit");

                    b.Property<bool>("AuthPrt")
                        .HasColumnType("bit");

                    b.Property<bool>("AuthVer")
                        .HasColumnType("bit");

                    b.HasKey("PerfilId", "FuncionalidadeId");

                    b.HasIndex("FuncionalidadeId");

                    b.ToTable("PerfisFuncionalidades", "Plataforma");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Platform.PerfilUtilizador", b =>
                {
                    b.Property<Guid>("PerfilId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UtilizadorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PerfilId", "UtilizadorId");

                    b.HasIndex("UtilizadorId");

                    b.ToTable("PerfisUtilizadores", "Plataforma");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Common.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "Identity");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Application.Aplicacao", b =>
                {
                    b.HasOne("GSLP.Domain.Entities.Catalog.Application.Area", "Area")
                        .WithMany("Aplicacoes")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Application.Funcionalidade", b =>
                {
                    b.HasOne("GSLP.Domain.Entities.Catalog.Application.Modulo", "Modulo")
                        .WithMany("Funcionalidades")
                        .HasForeignKey("ModuloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modulo");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Application.Modulo", b =>
                {
                    b.HasOne("GSLP.Domain.Entities.Catalog.Application.Aplicacao", "Aplicacao")
                        .WithMany("Modulos")
                        .HasForeignKey("AplicacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aplicacao");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Platform.Licenca", b =>
                {
                    b.HasOne("GSLP.Domain.Entities.Catalog.Application.Aplicacao", "Aplicacao")
                        .WithMany("Licencas")
                        .HasForeignKey("AplicacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GSLP.Domain.Entities.Catalog.Platform.Cliente", "Cliente")
                        .WithMany("Licencas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aplicacao");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Platform.LicencaAPIKey", b =>
                {
                    b.HasOne("GSLP.Domain.Entities.Catalog.Platform.Licenca", "Licenca")
                        .WithOne("LicencaAPIKey")
                        .HasForeignKey("GSLP.Domain.Entities.Catalog.Platform.LicencaAPIKey", "LicencaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Licenca");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Platform.LicencaFuncionalidade", b =>
                {
                    b.HasOne("GSLP.Domain.Entities.Catalog.Application.Funcionalidade", "Funcionalidade")
                        .WithMany("LicencasFuncionalidades")
                        .HasForeignKey("FuncionalidadeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GSLP.Domain.Entities.Catalog.Platform.Licenca", "Licenca")
                        .WithMany("LicencasFuncionalidades")
                        .HasForeignKey("LicencaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Funcionalidade");

                    b.Navigation("Licenca");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Platform.LicencaModulo", b =>
                {
                    b.HasOne("GSLP.Domain.Entities.Catalog.Platform.Licenca", "Licenca")
                        .WithMany("LicencasModulos")
                        .HasForeignKey("LicencaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GSLP.Domain.Entities.Catalog.Application.Modulo", "Modulo")
                        .WithMany("LicencasModulos")
                        .HasForeignKey("ModuloId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Licenca");

                    b.Navigation("Modulo");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Platform.LicencaUtilizador", b =>
                {
                    b.HasOne("GSLP.Domain.Entities.Catalog.Platform.Licenca", "Licenca")
                        .WithMany("LicencasUtilizadores")
                        .HasForeignKey("LicencaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GSLP.Domain.Entities.Common.ApplicationUser", "Utilizador")
                        .WithMany("LicencasUtilizadores")
                        .HasForeignKey("UtilizadorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Licenca");

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Platform.Perfil", b =>
                {
                    b.HasOne("GSLP.Domain.Entities.Catalog.Platform.Licenca", "Licenca")
                        .WithMany("Perfis")
                        .HasForeignKey("LicencaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Licenca");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Platform.PerfilFuncionalidade", b =>
                {
                    b.HasOne("GSLP.Domain.Entities.Catalog.Application.Funcionalidade", "Funcionalidade")
                        .WithMany("PerfisFuncionalidades")
                        .HasForeignKey("FuncionalidadeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GSLP.Domain.Entities.Catalog.Platform.Perfil", "Perfil")
                        .WithMany("PerfisFuncionalidades")
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Funcionalidade");

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Platform.PerfilUtilizador", b =>
                {
                    b.HasOne("GSLP.Domain.Entities.Catalog.Platform.Perfil", "Perfil")
                        .WithMany("PerfisUtilizadores")
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GSLP.Domain.Entities.Common.ApplicationUser", "Utilizador")
                        .WithMany("PerfisUtilizadores")
                        .HasForeignKey("UtilizadorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Perfil");

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Common.ApplicationUser", b =>
                {
                    b.HasOne("GSLP.Domain.Entities.Catalog.Platform.Cliente", "Cliente")
                        .WithMany("Utilizadores")
                        .HasForeignKey("ClienteId");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GSLP.Domain.Entities.Common.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GSLP.Domain.Entities.Common.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GSLP.Domain.Entities.Common.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GSLP.Domain.Entities.Common.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Application.Aplicacao", b =>
                {
                    b.Navigation("Licencas");

                    b.Navigation("Modulos");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Application.Area", b =>
                {
                    b.Navigation("Aplicacoes");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Application.Funcionalidade", b =>
                {
                    b.Navigation("LicencasFuncionalidades");

                    b.Navigation("PerfisFuncionalidades");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Application.Modulo", b =>
                {
                    b.Navigation("Funcionalidades");

                    b.Navigation("LicencasModulos");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Platform.Cliente", b =>
                {
                    b.Navigation("Licencas");

                    b.Navigation("Utilizadores");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Platform.Licenca", b =>
                {
                    b.Navigation("LicencaAPIKey");

                    b.Navigation("LicencasFuncionalidades");

                    b.Navigation("LicencasModulos");

                    b.Navigation("LicencasUtilizadores");

                    b.Navigation("Perfis");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Catalog.Platform.Perfil", b =>
                {
                    b.Navigation("PerfisFuncionalidades");

                    b.Navigation("PerfisUtilizadores");
                });

            modelBuilder.Entity("GSLP.Domain.Entities.Common.ApplicationUser", b =>
                {
                    b.Navigation("LicencasUtilizadores");

                    b.Navigation("PerfisUtilizadores");
                });
#pragma warning restore 612, 618
        }
    }
}
