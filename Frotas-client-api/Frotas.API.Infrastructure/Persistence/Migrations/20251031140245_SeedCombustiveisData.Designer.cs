// <auto-generated />
using System;
using Frotas.API.Infrastructure.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Frotas.API.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251031140245_SeedCombustiveisData")]
    partial class SeedCombustiveisData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Frotas.API.Domain.Entities.Base.CodigoPostal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Localidade")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CodigoPostal", "Base");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Base.Concelho", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DistritoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DistritoId");

                    b.ToTable("Concelho", "Base");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Base.Distrito", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PaisId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PaisId");

                    b.ToTable("Distrito", "Base");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Base.Entidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CartaoIdentificacaoDataEmissao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CartaoIdentificacaoDataValidade")
                        .HasColumnType("datetime2");

                    b.Property<string>("CartaoIdentificacaoNumero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CartaoIdentificacaoTipoId")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EstadoCivilId")
                        .HasColumnType("int");

                    b.Property<bool>("Historico")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NIF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NIFEstrangeiro")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuaAndar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RuaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RuaNumeroPorta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RuaId");

                    b.ToTable("Entidade", "Base");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Base.EntidadeContacto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntidadeContactoTipoId")
                        .HasColumnType("int");

                    b.Property<Guid>("EntidadeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Principal")
                        .HasColumnType("bit");

                    b.Property<string>("Valor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntidadeId");

                    b.ToTable("EntidadeContacto", "Base");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Base.Epoca", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ano")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Bloqueada")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EpocaAnteriorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Predefinida")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EpocaAnteriorId");

                    b.ToTable("Epoca", "Base");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Base.Freguesia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConcelhoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConcelhoId");

                    b.ToTable("Freguesia", "Base");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Base.Pais", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefixo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pais", "Base");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Base.Rua", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CodigoPostalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FreguesiaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CodigoPostalId");

                    b.HasIndex("FreguesiaId");

                    b.ToTable("Rua", "Base");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Base.Rubrica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClassificacaoTipo")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EpocaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("RubricaTipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EpocaId");

                    b.ToTable("Rubrica", "Base");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Frotas.AgenciaFuneraria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EntidadeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Historico")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EntidadeId");

                    b.ToTable("AgenciaFuneraria", "Frotas");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Frotas.Categoria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Designacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categoria", "Frotas");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Frotas.Combustivel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Combustivel", "Frotas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Nome = "Gasolina 95"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Nome = "Gasolina 98"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Nome = "Gasolina E10"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Nome = "E85"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Nome = "Gasóleo Simples"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Nome = "Gasóleo Aditivado"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Nome = "Biodiesel"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Nome = "GPL/Autogás"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Nome = "GNV/Gás Natural Veicular"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000a"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOn = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Nome = "ADBlue"
                        });
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Frotas.Coveiro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CodigoPostalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Historico")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NIF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RuaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CodigoPostalId");

                    b.HasIndex("RuaId");

                    b.ToTable("Coveiro", "Frotas");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Frotas.Marca", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Marca", "Frotas");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Frotas.Modelo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MarcaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MarcaId");

                    b.ToTable("Modelo", "Frotas");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Base.Concelho", b =>
                {
                    b.HasOne("Frotas.API.Domain.Entities.Base.Distrito", "Distrito")
                        .WithMany("Concelhos")
                        .HasForeignKey("DistritoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Distrito");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Base.Distrito", b =>
                {
                    b.HasOne("Frotas.API.Domain.Entities.Base.Pais", "Pais")
                        .WithMany("Distritos")
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Base.Entidade", b =>
                {
                    b.HasOne("Frotas.API.Domain.Entities.Base.Rua", "Rua")
                        .WithMany("Entidades")
                        .HasForeignKey("RuaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Rua");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Base.EntidadeContacto", b =>
                {
                    b.HasOne("Frotas.API.Domain.Entities.Base.Entidade", "Entidade")
                        .WithMany("Contactos")
                        .HasForeignKey("EntidadeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Entidade");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Base.Epoca", b =>
                {
                    b.HasOne("Frotas.API.Domain.Entities.Base.Epoca", "EpocaAnterior")
                        .WithMany()
                        .HasForeignKey("EpocaAnteriorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("EpocaAnterior");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Base.Freguesia", b =>
                {
                    b.HasOne("Frotas.API.Domain.Entities.Base.Concelho", "Concelho")
                        .WithMany("Freguesias")
                        .HasForeignKey("ConcelhoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Concelho");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Base.Rua", b =>
                {
                    b.HasOne("Frotas.API.Domain.Entities.Base.CodigoPostal", "CodigoPostal")
                        .WithMany("Ruas")
                        .HasForeignKey("CodigoPostalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Frotas.API.Domain.Entities.Base.Freguesia", "Freguesia")
                        .WithMany("Ruas")
                        .HasForeignKey("FreguesiaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CodigoPostal");

                    b.Navigation("Freguesia");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Base.Rubrica", b =>
                {
                    b.HasOne("Frotas.API.Domain.Entities.Base.Epoca", "Epoca")
                        .WithMany()
                        .HasForeignKey("EpocaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Epoca");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Frotas.AgenciaFuneraria", b =>
                {
                    b.HasOne("Frotas.API.Domain.Entities.Base.Entidade", "Entidade")
                        .WithMany()
                        .HasForeignKey("EntidadeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Entidade");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Frotas.Coveiro", b =>
                {
                    b.HasOne("Frotas.API.Domain.Entities.Base.CodigoPostal", "CodigoPostal")
                        .WithMany()
                        .HasForeignKey("CodigoPostalId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Frotas.API.Domain.Entities.Base.Rua", "Rua")
                        .WithMany()
                        .HasForeignKey("RuaId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CodigoPostal");

                    b.Navigation("Rua");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Frotas.Modelo", b =>
                {
                    b.HasOne("Frotas.API.Domain.Entities.Frotas.Marca", "Marca")
                        .WithMany()
                        .HasForeignKey("MarcaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Marca");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Base.CodigoPostal", b =>
                {
                    b.Navigation("Ruas");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Base.Concelho", b =>
                {
                    b.Navigation("Freguesias");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Base.Distrito", b =>
                {
                    b.Navigation("Concelhos");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Base.Entidade", b =>
                {
                    b.Navigation("Contactos");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Base.Freguesia", b =>
                {
                    b.Navigation("Ruas");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Base.Pais", b =>
                {
                    b.Navigation("Distritos");
                });

            modelBuilder.Entity("Frotas.API.Domain.Entities.Base.Rua", b =>
                {
                    b.Navigation("Entidades");
                });
#pragma warning restore 612, 618
        }
    }
}
